###Code Quality and Readability Improvements###

1 - The script lacks comprehensive error handling and logging.
While there are some basic error catches, a more robust logging mechanism would help track and diagnose issues more effectively.
Consider implementing a structured logging approach that captures more context about each error.
2 - The code has several lengthy functions that could benefit from being broken down into smaller, more focused functions.
This would improve readability and make the code easier to maintain and test.
3 - A better folder structure would help considerably in understanding the code

###Project Architecture Enhancements###

1 - The current architecture tightly couples data fetching, processing, and storage.
It would be beneficial to implement a more modular design with clear separation of concerns,
potentially using dependency injection to make components more loosely coupled and easier to test.

###Performance Optimization Strategies###

1 - The script uses a single queue with a massive concurrency limit (100,000,000), which might lead to memory issues;
Instead, implement more controlled concurrency with rate limiting and better memory management. Consider using worker pools or more granular queue management.
2 - The pagination and retry logic for API calls is repetitive across different methods.
This could be extracted into a generic, reusable utility function to reduce code duplication and improve maintainability;
3 - Using appropriate queue services such as RabbitMQ would help to improve performance;